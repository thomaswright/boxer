// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Tb from "react-icons/tb";
import * as JsxRuntime from "react/jsx-runtime";

function CanvasSizeControl(props) {
  let handleResizeSubmit = props.handleResizeSubmit;
  let canSubmitResize = props.canSubmitResize;
  let setResizeMode = props.setResizeMode;
  let resizeMode = props.resizeMode;
  let setResizeColsInput = props.setResizeColsInput;
  let setResizeRowsInput = props.setResizeRowsInput;
  let baseButtonClasses = "flex-1 rounded px-2 py-1 text-xs font-medium border";
  let tmp;
  tmp = resizeMode === "Scale" ? "bg-blue-500 text-white border-blue-500" : "bg-gray-100 text-gray-700 border-gray-300";
  let scaleButtonClasses = [
    baseButtonClasses,
    tmp
  ].join(" ");
  let tmp$1;
  tmp$1 = resizeMode === "Scale" ? "bg-gray-100 text-gray-700 border-gray-300" : "bg-blue-500 text-white border-blue-500";
  let cropButtonClasses = [
    baseButtonClasses,
    tmp$1
  ].join(" ");
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsx("div", {
        children: "Canvas Size",
        className: [
          "flex flex-row items-center justify-between font-medium",
          "w-full"
        ].join(" ")
      }),
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("button", {
                children: "Scale",
                "aria-pressed": resizeMode === "Scale" ? "true" : "false",
                className: scaleButtonClasses,
                type: "button",
                onClick: param => setResizeMode(param => "Scale")
              }),
              JsxRuntime.jsx("button", {
                children: "Crop",
                "aria-pressed": resizeMode === "Crop" ? "true" : "false",
                className: cropButtonClasses,
                type: "button",
                onClick: param => setResizeMode(param => "Crop")
              })
            ],
            className: "flex flex-row gap-2"
          }),
          JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("input", {
                className: "border rounded px-2 py-1 text-sm flex-none w-16 ",
                value: props.resizeRowsInput,
                onChange: event => {
                  let value = event.target.value;
                  setResizeRowsInput(param => value);
                }
              }),
              JsxRuntime.jsx(Tb.TbX, {}),
              JsxRuntime.jsx("input", {
                className: "border rounded px-2 py-1 text-sm flex-none w-16 ",
                value: props.resizeColsInput,
                onChange: event => {
                  let value = event.target.value;
                  setResizeColsInput(param => value);
                }
              })
            ],
            className: "flex flex-row w-full gap-2 justify-between items-center"
          }),
          JsxRuntime.jsx("button", {
            children: "Save",
            className: [
              "rounded px-2 py-1 text-sm font-medium",
              canSubmitResize ? "bg-blue-500 text-white" : "bg-gray-200 text-gray-500 cursor-not-allowed"
            ].join(" "),
            disabled: !canSubmitResize,
            onClick: param => handleResizeSubmit()
          })
        ],
        className: "flex flex-col gap-2"
      })
    ],
    className: " p-2 flex flex-col gap-2 w-full"
  });
}

let make = CanvasSizeControl;

export {
  make,
}
/* react-icons/tb Not a pure module */
