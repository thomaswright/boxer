// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Array2D from "./Array2D.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function SavedBrushesPanel(props) {
  let handleDeleteSelectedBrush = props.handleDeleteSelectedBrush;
  let canDeleteSelectedBrush = props.canDeleteSelectedBrush;
  let setSavedBrushes = props.setSavedBrushes;
  let setBrush = props.setBrush;
  let brush = props.brush;
  let board = props.board;
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsx("button", {
            children: "x",
            className: [
              "w-4 h-4 leading-none",
              canDeleteSelectedBrush ? "bg-red-500 text-white" : "bg-gray-200 text-gray-500 cursor-not-allowed"
            ].join(" "),
            disabled: !canDeleteSelectedBrush,
            onClick: param => handleDeleteSelectedBrush()
          }),
          JsxRuntime.jsx("button", {
            children: "+",
            className: "bg-gray-200 w-4 h-4 leading-none",
            onClick: param => {
              let newBrush = board.map(row => row.map(cell => !(cell == null)));
              setSavedBrushes(v => v.concat([newBrush]));
              setBrush(param => newBrush);
            }
          })
        ]
      }),
      props.savedBrushes.map((savedBrush, savedBrushIndex) => {
        let match = Array2D.dims(savedBrush);
        let dimJ = match[1];
        let dimI = match[0];
        let selected = Array2D.isEqual(brush, savedBrush);
        return JsxRuntime.jsxs("button", {
          children: [
            JsxRuntime.jsx("div", {
              children: dimI.toString() + ":" + dimJ.toString(),
              className: [
                " text-3xs font-bold w-4 text-center bg-white",
                selected ? "text-orange-700" : "text-black"
              ].join(" "),
              style: {
                writingMode: "sideways-lr"
              }
            }),
            JsxRuntime.jsx("div", {
              children: savedBrush.map((line, i) => line.map((cell, j) => JsxRuntime.jsx("div", {
                className: [
                  "w-full h-full ",
                  selected ? (
                      cell ? "bg-orange-500" : "bg-orange-200"
                    ) : (
                      cell ? "bg-gray-400" : "bg-gray-200"
                    )
                ].join(" ")
              }, i.toString() + j.toString()))),
              className: [
                selected ? "bg-orange-500" : "bg-gray-400",
                "flex flex-row h-8 w-8 rounded-xs overflow-hidden"
              ].join(" "),
              style: {
                display: "grid",
                gridTemplateColumns: "repeat(" + dimJ.toString() + ", auto)",
                gridTemplateRows: "repeat(" + dimI.toString() + ", auto)"
              }
            })
          ],
          className: ["flex flex-row"].join(" "),
          onClick: param => setBrush(param => savedBrush)
        }, savedBrushIndex.toString());
      })
    ],
    className: "flex flex-col gap-1 h-full overflow-y-scroll"
  });
}

let make = SavedBrushesPanel;

export {
  make,
}
/* Array2D Not a pure module */
