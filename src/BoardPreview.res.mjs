// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Board from "./Board.res.mjs";
import * as React from "react";
import * as PreviewCanvas from "./PreviewCanvas.res.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as IdleSchedulerJs from "./IdleScheduler.js";

function schedule(prim) {
  return IdleSchedulerJs.schedule(prim);
}

function cancel(prim) {
  IdleSchedulerJs.cancel(prim);
}

let IdleScheduler = {
  schedule: schedule,
  cancel: cancel
};

function BoardPreview(props) {
  let isMouseDown = props.isMouseDown;
  let emptyColor = props.emptyColor;
  let board = props.board;
  let canvasRef = React.useRef(null);
  let drawHandleRef = React.useRef(undefined);
  React.useEffect(() => {
    let canvasElement = canvasRef.current;
    if (!(canvasElement == null)) {
      let handle = drawHandleRef.current;
      if (handle !== undefined) {
        IdleSchedulerJs.cancel(Primitive_option.valFromOption(handle));
        drawHandleRef.current = undefined;
      }
      if (!isMouseDown) {
        let handle$1 = IdleSchedulerJs.schedule(() => {
          drawHandleRef.current = undefined;
          PreviewCanvas.drawBoard(canvasElement, board, emptyColor);
        });
        drawHandleRef.current = Primitive_option.some(handle$1);
      }
      
    }
    return () => {
      let handle = drawHandleRef.current;
      if (handle !== undefined) {
        IdleSchedulerJs.cancel(Primitive_option.valFromOption(handle));
        drawHandleRef.current = undefined;
        return;
      }
      
    };
  }, [
    Board.data(board),
    emptyColor,
    isMouseDown
  ]);
  return JsxRuntime.jsx("canvas", {
    ref: Primitive_option.some(canvasRef),
    className: "block object-contain w-full h-full",
    style: {
      imageRendering: "pixelated"
    }
  });
}

let make = BoardPreview;

export {
  IdleScheduler,
  make,
}
/* Board Not a pure module */
