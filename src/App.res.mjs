// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import SwitchJsx from "./Switch.jsx";
import * as Color from "@texel/color";
import * as Stdlib_Array from "rescript/lib/es6/Stdlib_Array.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as ReactColorful from "react-colorful";
import * as Stdlib_Nullable from "rescript/lib/es6/Stdlib_Nullable.js";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as JsxRuntime from "react/jsx-runtime";
import UseLocalStorageJs from "./useLocalStorage.js";

let make = SwitchJsx;

function update2D(a, i, j, f) {
  return a.map((row, rowI) => {
    if (rowI === i) {
      return row.map((cell, cellJ) => {
        if (cellJ === j) {
          return f(cell);
        } else {
          return cell;
        }
      });
    } else {
      return row;
    }
  });
}

function make2D(a, b, f) {
  return Stdlib_Array.make(a, Stdlib_Array.make(b, f()));
}

function dims2D(a) {
  let boardDimI = a.length;
  let boardDimJ = Stdlib_Option.mapOr(a[0], 0, line => line.length);
  return [
    boardDimI,
    boardDimJ
  ];
}

function check2D(a, i, j) {
  return Stdlib_Option.flatMap(a[i], row => row[j]);
}

function useIsMouseDown() {
  let match = React.useState(() => false);
  let setIsMouseDown = match[1];
  React.useEffect(() => {
    let downHandler = param => setIsMouseDown(param => true);
    let upHandler = param => setIsMouseDown(param => false);
    window.addEventListener("mousedown", downHandler);
    window.addEventListener("mouseup", upHandler);
    return () => {
      window.removeEventListener("mousedown", downHandler);
      window.removeEventListener("mouseup", upHandler);
    };
  }, []);
  return match[0];
}

function getOverlayId(i, j) {
  return "canvas-overlay" + i.toString() + j.toString();
}

function isLight(color) {
  let match = Color.convert(Color.hexToRGB(color), Color.sRGB, Color.OKHSL);
  return match[2] > 0.5;
}

let defaultTileMasks = [
  [
    [
      true,
      false
    ],
    [
      false,
      true
    ]
  ],
  [
    [
      false,
      true
    ],
    [
      true,
      false
    ]
  ],
  [
    [
      false,
      true
    ],
    [
      false,
      true
    ]
  ],
  [
    [
      true,
      false
    ],
    [
      true,
      false
    ]
  ],
  [
    [
      false,
      false
    ],
    [
      true,
      true
    ]
  ],
  [
    [
      true,
      true
    ],
    [
      false,
      false
    ]
  ],
  [
    [
      true,
      false
    ],
    [
      false,
      false
    ]
  ],
  [
    [
      false,
      true
    ],
    [
      false,
      false
    ]
  ],
  [
    [
      false,
      false
    ],
    [
      true,
      false
    ]
  ],
  [
    [
      false,
      false
    ],
    [
      false,
      true
    ]
  ]
];

let defaultBrushes = [
  make2D(1, 1, () => true),
  make2D(2, 2, () => true),
  make2D(3, 3, () => true),
  make2D(4, 4, () => true),
  make2D(8, 8, () => true),
  make2D(12, 12, () => true),
  make2D(16, 16, () => true)
];

function App(props) {
  let match = UseLocalStorageJs("brush-mode", "Color");
  let setBrushMode = match[1];
  let brushMode = match[0];
  let match$1 = UseLocalStorageJs("board", make2D(12, 12, () => null));
  let setBoard = match$1[1];
  let board = match$1[0];
  let match$2 = UseLocalStorageJs("brush", make2D(3, 3, () => true));
  let setBrush = match$2[1];
  let brush = match$2[0];
  let match$3 = UseLocalStorageJs("saved-brushes", defaultBrushes);
  let match$4 = UseLocalStorageJs("saved-tile-masks", defaultTileMasks);
  let match$5 = UseLocalStorageJs("tile-mask", make2D(4, 4, () => true));
  let setTileMask = match$5[1];
  let tileMask = match$5[0];
  let match$6 = UseLocalStorageJs("show-cursor-overlay", true);
  let setShowCursorOverlay = match$6[1];
  let showCursorOverlay = match$6[0];
  let match$7 = UseLocalStorageJs("my-color", "blue");
  let setMyColor = match$7[1];
  let myColor = match$7[0];
  let match$8 = React.useState(() => false);
  let setCursorOverlayOff = match$8[1];
  let cursorOverlayOff = match$8[0];
  let isMouseDown = useIsMouseDown();
  let match$9 = dims2D(board);
  let match$10 = dims2D(brush);
  let brushDimJ = match$10[1];
  let brushDimI = match$10[0];
  let brushCenterDimI = brushDimI / 2 | 0;
  let brushCenterDimJ = brushDimJ / 2 | 0;
  let match$11 = dims2D(tileMask);
  let tileMaskDimJ = match$11[1];
  let tileMaskDimI = match$11[0];
  let onMouseMove = param => setCursorOverlayOff(param => false);
  let canApply = (boardI, boardJ, clickI, clickJ) => {
    let brushPosI = (boardI - clickI | 0) + brushCenterDimI | 0;
    let brushPosJ = (boardJ - clickJ | 0) + brushCenterDimJ | 0;
    let brushAllows = Stdlib_Option.getOr(check2D(brush, brushPosI, brushPosJ), false);
    let maskAllows = Stdlib_Option.getOr(check2D(tileMask, Primitive_int.mod_(boardI, tileMaskDimI), Primitive_int.mod_(boardJ, tileMaskDimJ)), false);
    if (brushAllows) {
      return maskAllows;
    } else {
      return false;
    }
  };
  let applyOverlay = (clickI, clickJ, f) => {
    board.forEach((row, boardI) => {
      row.forEach((param, boardJ) => {
        if (!canApply(boardI, boardJ, clickI, clickJ)) {
          return;
        }
        let id = getOverlayId(boardI, boardJ);
        Stdlib_Option.mapOr(Primitive_option.fromNullable(document.getElementById(id)), undefined, f);
      });
    });
  };
  let getBrushColor = () => {
    if (brushMode === "Color") {
      return myColor;
    } else {
      return null;
    }
  };
  let applyBrush = (clickI, clickJ) => setBoard(b => b.map((row, boardI) => row.map((cell, boardJ) => {
    if (canApply(boardI, boardJ, clickI, clickJ)) {
      return getBrushColor();
    } else {
      return cell;
    }
  })));
  React.useEffect(() => {
    window.addEventListener("mousemove", onMouseMove);
  }, []);
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsx("div", {
            children: brush.map((line, i) => line.map((cell, j) => {
              let isCursorCenter = (brushDimI / 2 | 0) === i && (brushDimJ / 2 | 0) === j;
              return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("div", {
                    className: "w-full h-full absolute",
                    style: {
                      backgroundColor: cell ? "#00c3ff" : "transparent"
                    }
                  }),
                  cursorOverlayOff || !showCursorOverlay ? null : JsxRuntime.jsx("div", {
                      className: "absolute w-full h-full inset-0 bg-black opacity-0 group-hover:opacity-20"
                    }),
                  isCursorCenter ? JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("div", {
                        className: " w-1/2 h-1/2 bg-red-500 rounded-full"
                      }),
                      className: "absolute w-full h-full flex flex-row items-center justify-center "
                    }) : null
                ],
                className: "w-full h-full group relative ",
                onMouseDown: param => {
                  setBrush(b => update2D(b, i, j, v => !v));
                  setCursorOverlayOff(param => true);
                },
                onMouseEnter: param => {
                  if (isMouseDown) {
                    return setBrush(b => update2D(b, i, j, v => !v));
                  }
                  
                }
              }, i.toString() + j.toString());
            })),
            className: "border w-20 h-20",
            style: {
              display: "grid",
              gridTemplateColumns: "repeat(" + brushDimI.toString() + ", auto)",
              gridTemplateRows: "repeat(" + brushDimJ.toString() + ", auto)"
            }
          }),
          JsxRuntime.jsx("div", {
            children: match$3[0].map(savedBrush => {
              let match = dims2D(savedBrush);
              let dimJ = match[1];
              let dimI = match[0];
              return JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx("div", {
                    children: dimI.toString() + ":" + dimJ.toString(),
                    className: " text-3xs font-bold border border-b-0 w-8 text-center"
                  }),
                  JsxRuntime.jsx("button", {
                    children: savedBrush.map((line, i) => line.map((cell, j) => JsxRuntime.jsx("div", {
                      className: "w-full h-full ",
                      style: {
                        backgroundColor: cell ? "#00c3ff" : "transparent"
                      }
                    }, i.toString() + j.toString()))),
                    className: "h-8 w-8 border",
                    style: {
                      display: "grid",
                      gridTemplateColumns: "repeat(" + dimI.toString() + ", auto)",
                      gridTemplateRows: "repeat(" + dimJ.toString() + ", auto)"
                    },
                    onClick: param => setBrush(param => savedBrush)
                  })
                ]
              });
            }),
            className: "flex flex-row flex-wrap gap-1 w-32"
          }),
          JsxRuntime.jsx("div", {
            children: tileMask.map((line, i) => line.map((cell, j) => JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                  className: "w-full h-full absolute",
                  style: {
                    backgroundColor: cell ? "#ffa700" : "transparent"
                  }
                }),
                cursorOverlayOff || !showCursorOverlay ? null : JsxRuntime.jsx("div", {
                    className: "absolute w-full h-full inset-0 bg-black opacity-0 group-hover:opacity-20"
                  })
              ],
              className: "w-full h-full group relative ",
              onMouseDown: param => {
                setTileMask(b => update2D(b, i, j, v => !v));
                setCursorOverlayOff(param => true);
              },
              onMouseEnter: param => {
                if (isMouseDown) {
                  return setTileMask(b => update2D(b, i, j, v => !v));
                }
                
              }
            }, i.toString() + j.toString()))),
            className: "border w-20 h-20",
            style: {
              display: "grid",
              gridTemplateColumns: "repeat(" + tileMaskDimI.toString() + ", auto)",
              gridTemplateRows: "repeat(" + tileMaskDimJ.toString() + ", auto)"
            }
          }),
          JsxRuntime.jsx("div", {
            children: match$4[0].map(savedTileMask => {
              let match = dims2D(savedTileMask);
              return JsxRuntime.jsx("button", {
                children: savedTileMask.map((line, i) => line.map((cell, j) => JsxRuntime.jsx("div", {
                  className: "w-full h-full ",
                  style: {
                    backgroundColor: cell ? "#ffa700" : "transparent"
                  }
                }, i.toString() + j.toString()))),
                className: "h-5 w-5 border",
                style: {
                  display: "grid",
                  gridTemplateColumns: "repeat(" + match[0].toString() + ", auto)",
                  gridTemplateRows: "repeat(" + match[1].toString() + ", auto)"
                },
                onClick: param => setTileMask(param => savedTileMask)
              });
            }),
            className: "flex flex-row flex-wrap gap-1 w-20"
          })
        ],
        className: "flex flex-row gap-2"
      }),
      JsxRuntime.jsx("div", {
        children: board.map((line, i) => line.map((cell, j) => {
          let backgroundColor = Stdlib_Nullable.getOr(cell, "transparent");
          let overlayBackgroundColor = Stdlib_Nullable.mapOr(cell, "black", v => {
            if (isLight(v)) {
              return "black";
            } else {
              return "white";
            }
          });
          return JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                className: "w-full h-full absolute",
                style: {
                  backgroundColor: backgroundColor
                }
              }),
              cursorOverlayOff || !showCursorOverlay ? null : JsxRuntime.jsx("div", {
                  className: "absolute w-full h-full inset-0 opacity-20",
                  id: getOverlayId(i, j),
                  style: {
                    backgroundColor: overlayBackgroundColor,
                    display: "none"
                  }
                })
            ],
            className: "w-full h-full group relative",
            onMouseDown: param => {
              applyBrush(i, j);
              setCursorOverlayOff(param => true);
            },
            onMouseEnter: param => {
              applyOverlay(i, j, el => {
                el.style.display = "block";
              });
              if (isMouseDown) {
                return applyBrush(i, j);
              }
              
            },
            onMouseLeave: param => applyOverlay(i, j, el => {
              el.style.display = "none";
            })
          }, i.toString() + j.toString());
        })),
        className: "border w-fit h-fit",
        style: {
          display: "grid",
          gridTemplateColumns: "repeat(" + match$9[0].toString() + ", 1rem)",
          gridTemplateRows: "repeat(" + match$9[1].toString() + ", 1rem)"
        }
      }),
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("button", {
                children: "Color",
                className: [
                  brushMode === "Color" ? " bg-blue-500 text-white" : "bg-gray-200",
                  "px-2 font-medium rounded"
                ].join(" "),
                onClick: param => setBrushMode(param => "Color")
              }),
              JsxRuntime.jsx("button", {
                children: "Erase",
                className: [
                  brushMode === "Erase" ? " bg-blue-500 text-white" : "bg-gray-200",
                  "px-2 font-medium rounded"
                ].join(" "),
                onClick: param => setBrushMode(param => "Erase")
              })
            ],
            className: "flex flex-row gap-2"
          }),
          JsxRuntime.jsx(ReactColorful.HexColorPicker, {
            color: myColor,
            onChange: newColor => setMyColor(param => newColor)
          }),
          JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                children: "Show Brush Overlay",
                className: "flex flex-row"
              }),
              JsxRuntime.jsx(make, {
                checked: showCursorOverlay,
                onChange: v => setShowCursorOverlay(param => v)
              })
            ]
          })
        ],
        className: "flex flex-col gap-2"
      })
    ],
    className: " flex flex-col gap-5 p-5"
  });
}

let make$1 = App;

export {
  make$1 as make,
}
/* make Not a pure module */
