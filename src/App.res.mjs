// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as OtherJs from "./other.js";
import * as Stdlib_Int from "rescript/lib/es6/Stdlib_Int.js";
import SwitchJsx from "./Switch.jsx";
import * as Color from "@texel/color";
import * as Stdlib_Array from "rescript/lib/es6/Stdlib_Array.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as ReactColorful from "react-colorful";
import * as Stdlib_Nullable from "rescript/lib/es6/Stdlib_Nullable.js";
import * as JsxRuntime from "react/jsx-runtime";
import UseLocalStorageJs from "./useLocalStorage.js";

let make = SwitchJsx;

function make2D(rows, cols, f) {
  return Stdlib_Array.make(rows, undefined).map(() => Stdlib_Array.make(cols, f()));
}

function dims2D(a) {
  let boardDimI = a.length;
  let boardDimJ = Stdlib_Option.mapOr(a[0], 0, line => line.length);
  return [
    boardDimI,
    boardDimJ
  ];
}

function check2D(a, i, j) {
  return Stdlib_Option.flatMap(a[i], row => row[j]);
}

function useIsMouseDown() {
  let match = React.useState(() => false);
  let setIsMouseDown = match[1];
  React.useEffect(() => {
    let downHandler = param => setIsMouseDown(param => true);
    let upHandler = param => setIsMouseDown(param => false);
    window.addEventListener("mousedown", downHandler);
    window.addEventListener("mouseup", upHandler);
    return () => {
      window.removeEventListener("mousedown", downHandler);
      window.removeEventListener("mouseup", upHandler);
    };
  }, []);
  return match[0];
}

function isLight(color) {
  let match = Color.convert(Color.hexToRGB(color), Color.sRGB, Color.OKHSL);
  return match[2] > 0.5;
}

let defaultTileMasks = [
  [
    [
      true,
      true
    ],
    [
      true,
      true
    ]
  ],
  [
    [
      true,
      false
    ],
    [
      false,
      true
    ]
  ],
  [
    [
      false,
      true
    ],
    [
      true,
      false
    ]
  ],
  [
    [
      false,
      true
    ],
    [
      false,
      true
    ]
  ],
  [
    [
      true,
      false
    ],
    [
      true,
      false
    ]
  ],
  [
    [
      false,
      false
    ],
    [
      true,
      true
    ]
  ],
  [
    [
      true,
      true
    ],
    [
      false,
      false
    ]
  ],
  [
    [
      true,
      false,
      false
    ],
    [
      false,
      true,
      false
    ],
    [
      false,
      false,
      true
    ]
  ]
];

let defaultBrushes = [
  make2D(1, 1, () => true),
  make2D(2, 2, () => true),
  make2D(3, 3, () => true),
  make2D(4, 4, () => true),
  make2D(8, 8, () => true),
  make2D(12, 12, () => true),
  make2D(16, 16, () => true)
];

function App(props) {
  let match = UseLocalStorageJs("brush-mode", "Color");
  let setBrushMode = match[1];
  let brushMode = match[0];
  let match$1 = UseLocalStorageJs("board", make2D(12, 12, () => null));
  let setBoard = match$1[1];
  let board = match$1[0];
  let match$2 = UseLocalStorageJs("brush", make2D(3, 3, () => true));
  let setBrush = match$2[1];
  let brush = match$2[0];
  let match$3 = UseLocalStorageJs("saved-brushes", defaultBrushes);
  let setSavedBrushes = match$3[1];
  let match$4 = UseLocalStorageJs("saved-tile-masks", defaultTileMasks);
  let setSavedTileMasks = match$4[1];
  let match$5 = UseLocalStorageJs("tile-mask", make2D(4, 4, () => true));
  let setTileMask = match$5[1];
  let tileMask = match$5[0];
  let match$6 = UseLocalStorageJs("show-cursor-overlay", true);
  let setShowCursorOverlay = match$6[1];
  let showCursorOverlay = match$6[0];
  let match$7 = UseLocalStorageJs("my-color", "blue");
  let setMyColor = match$7[1];
  let myColor = match$7[0];
  let match$8 = React.useState(() => false);
  let setCursorOverlayOff = match$8[1];
  let cursorOverlayOff = match$8[0];
  let match$9 = React.useState(() => {});
  let setHoveredCell = match$9[1];
  let hoveredCell = match$9[0];
  let isMouseDown = useIsMouseDown();
  let match$10 = dims2D(board);
  let boardDimJ = match$10[1];
  let boardDimI = match$10[0];
  let match$11 = dims2D(brush);
  let brushCenterDimI = match$11[0] / 2 | 0;
  let brushCenterDimJ = match$11[1] / 2 | 0;
  let match$12 = dims2D(tileMask);
  let tileMaskDimJ = match$12[1];
  let tileMaskDimI = match$12[0];
  let match$13 = React.useState(() => false);
  let setIsResizeOpen = match$13[1];
  let isResizeOpen = match$13[0];
  let match$14 = React.useState(() => boardDimI.toString());
  let setResizeRowsInput = match$14[1];
  let resizeRowsInput = match$14[0];
  let match$15 = React.useState(() => boardDimJ.toString());
  let setResizeColsInput = match$15[1];
  let resizeColsInput = match$15[0];
  React.useEffect(() => {
    setResizeRowsInput(param => boardDimI.toString());
    setResizeColsInput(param => boardDimJ.toString());
  }, [
    boardDimI,
    boardDimJ
  ]);
  let parsePositiveInt = value => {
    let parsed = Stdlib_Int.fromString(value, undefined);
    if (parsed !== undefined && parsed > 0) {
      return parsed;
    }
    
  };
  let match$16 = parsePositiveInt(resizeRowsInput);
  let match$17 = parsePositiveInt(resizeColsInput);
  let canSubmitResize = match$16 !== undefined && match$17 !== undefined ? match$16 !== boardDimI || match$17 !== boardDimJ : false;
  let onMouseMove = param => setCursorOverlayOff(param => false);
  let canApply = (boardI, boardJ, clickI, clickJ) => {
    let brushPosI = (boardI - clickI | 0) + brushCenterDimI | 0;
    let brushPosJ = (boardJ - clickJ | 0) + brushCenterDimJ | 0;
    let brushAllows = Stdlib_Option.getOr(check2D(brush, brushPosI, brushPosJ), false);
    let maskAllows = Stdlib_Option.getOr(check2D(tileMask, Primitive_int.mod_(boardI, tileMaskDimI), Primitive_int.mod_(boardJ, tileMaskDimJ)), false);
    if (brushAllows) {
      return maskAllows;
    } else {
      return false;
    }
  };
  let getBrushColor = () => {
    if (brushMode === "Color") {
      return myColor;
    } else {
      return null;
    }
  };
  let applyBrush = (clickI, clickJ) => setBoard(b => b.map((row, boardI) => row.map((cell, boardJ) => {
    if (canApply(boardI, boardJ, clickI, clickJ)) {
      return getBrushColor();
    } else {
      return cell;
    }
  })));
  React.useEffect(() => {
    window.addEventListener("mousemove", onMouseMove);
    return () => {
      window.removeEventListener("mousemove", onMouseMove);
    };
  }, []);
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsx("div", {
            children: match$3[0].map(savedBrush => {
              let match = dims2D(savedBrush);
              let dimJ = match[1];
              let dimI = match[0];
              let selected = OtherJs.isEqual2D(brush, savedBrush);
              return JsxRuntime.jsxs("button", {
                children: [
                  JsxRuntime.jsx("div", {
                    children: dimI.toString() + ":" + dimJ.toString(),
                    className: [" text-3xs font-bold border border-b-0 w-8 text-center"].join(" ")
                  }),
                  JsxRuntime.jsx("div", {
                    children: savedBrush.map((line, i) => line.map((cell, j) => JsxRuntime.jsx("div", {
                      className: "w-full h-full ",
                      style: {
                        backgroundColor: cell ? "#000" : "transparent"
                      }
                    }, i.toString() + j.toString()))),
                    className: "h-8 w-8 border",
                    style: {
                      display: "grid",
                      gridTemplateColumns: "repeat(" + dimI.toString() + ", auto)",
                      gridTemplateRows: "repeat(" + dimJ.toString() + ", auto)"
                    }
                  })
                ],
                className: [selected ? "bg-red-100 text-red-600" : ""].join(" "),
                onClick: param => setBrush(param => savedBrush)
              });
            }),
            className: "flex flex-row flex-wrap gap-1 w-32 h-fit"
          }),
          JsxRuntime.jsx("div", {
            children: match$4[0].map(savedTileMask => {
              let match = dims2D(savedTileMask);
              return JsxRuntime.jsx("button", {
                children: savedTileMask.map((line, i) => line.map((cell, j) => JsxRuntime.jsx("div", {
                  className: "w-full h-full ",
                  style: {
                    backgroundColor: cell ? "#ffa700" : "transparent"
                  }
                }, i.toString() + j.toString()))),
                className: "h-5 w-5 border",
                style: {
                  display: "grid",
                  gridTemplateColumns: "repeat(" + match[0].toString() + ", auto)",
                  gridTemplateRows: "repeat(" + match[1].toString() + ", auto)"
                },
                onClick: param => setTileMask(param => savedTileMask)
              });
            }),
            className: "flex flex-row flex-wrap gap-1 w-20 h-fit"
          })
        ],
        className: "flex flex-row gap-2"
      }),
      JsxRuntime.jsx("button", {
        children: "brush from canvas",
        className: "bg-gray-200 rounded px-2 h-fit w-fit",
        onClick: param => {
          let newBrush = board.map(row => row.map(cell => !(cell == null)));
          setSavedBrushes(v => v.concat([newBrush]));
          setBrush(param => newBrush);
        }
      }),
      JsxRuntime.jsx("button", {
        children: "dither mask from canvas",
        className: "bg-gray-200 rounded px-2 h-fit w-fit",
        onClick: param => {
          let newTileMask = board.map(row => row.map(cell => !(cell == null)));
          setSavedTileMasks(v => v.concat([newTileMask]));
          setTileMask(param => newTileMask);
        }
      }),
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsxs("button", {
            children: [
              "Canvas Size",
              JsxRuntime.jsx("span", {
                children: isResizeOpen ? "-" : "+"
              })
            ],
            className: [
              "flex flex-row items-center justify-between font-medium",
              "w-full"
            ].join(" "),
            onClick: param => setIsResizeOpen(v => !v)
          }),
          isResizeOpen ? JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                  children: [
                    JsxRuntime.jsx("input", {
                      className: "border rounded px-2 py-1 text-sm flex-1 min-w-0",
                      value: resizeRowsInput,
                      onChange: event => {
                        let value = event.target.value;
                        setResizeRowsInput(param => value);
                      }
                    }),
                    JsxRuntime.jsx("span", {
                      children: "x",
                      className: "flex-none px-1"
                    }),
                    JsxRuntime.jsx("input", {
                      className: "border rounded px-2 py-1 text-sm flex-1  min-w-0",
                      value: resizeColsInput,
                      onChange: event => {
                        let value = event.target.value;
                        setResizeColsInput(param => value);
                      }
                    })
                  ],
                  className: "flex flex-row w-full gap-2"
                }),
                JsxRuntime.jsx("button", {
                  children: "Save",
                  className: [
                    "rounded px-2 py-1 text-sm font-medium",
                    canSubmitResize ? "bg-blue-500 text-white" : "bg-gray-200 text-gray-500 cursor-not-allowed"
                  ].join(" "),
                  disabled: !canSubmitResize,
                  onClick: param => {
                    let match = parsePositiveInt(resizeRowsInput);
                    let match$1 = parsePositiveInt(resizeColsInput);
                    if (match !== undefined && match$1 !== undefined) {
                      setBoard(prev => make2D(match, match$1, () => null).map((row, rowI) => row.map((param, colJ) => Stdlib_Option.getOr(check2D(prev, rowI, colJ), null))));
                      setHoveredCell(param => {});
                      setCursorOverlayOff(param => true);
                      return setIsResizeOpen(param => false);
                    }
                    
                  }
                })
              ],
              className: "flex flex-col gap-2"
            }) : null
        ],
        className: "border rounded p-2 flex flex-col gap-2 w-48"
      }),
      JsxRuntime.jsx("div", {
        children: board.map((line, i) => line.map((cell, j) => {
          let backgroundColor = Stdlib_Nullable.getOr(cell, "transparent");
          let overlayBackgroundColor = Stdlib_Nullable.mapOr(cell, "black", v => {
            if (isLight(v)) {
              return "black";
            } else {
              return "white";
            }
          });
          return JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                className: "w-full h-full absolute",
                style: {
                  backgroundColor: backgroundColor
                }
              }),
              hoveredCell !== undefined && !(cursorOverlayOff || !showCursorOverlay || !canApply(i, j, hoveredCell[0], hoveredCell[1])) ? JsxRuntime.jsx("div", {
                  className: "absolute w-full h-full inset-0 opacity-20",
                  style: {
                    backgroundColor: overlayBackgroundColor
                  }
                }) : null
            ],
            className: "w-full h-full group relative",
            onMouseDown: param => {
              applyBrush(i, j);
              setCursorOverlayOff(param => true);
            },
            onMouseEnter: param => {
              setHoveredCell(param => [
                i,
                j
              ]);
              if (isMouseDown) {
                return applyBrush(i, j);
              }
              
            },
            onMouseLeave: param => setHoveredCell(param => {})
          }, i.toString() + j.toString());
        })),
        className: "border w-fit h-fit",
        style: {
          display: "grid",
          gridTemplateColumns: "repeat(" + boardDimI.toString() + ", 1rem)",
          gridTemplateRows: "repeat(" + boardDimJ.toString() + ", 1rem)"
        }
      }),
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("button", {
                children: "Color",
                className: [
                  brushMode === "Color" ? " bg-blue-500 text-white" : "bg-gray-200",
                  "px-2 font-medium rounded"
                ].join(" "),
                onClick: param => setBrushMode(param => "Color")
              }),
              JsxRuntime.jsx("button", {
                children: "Erase",
                className: [
                  brushMode === "Erase" ? " bg-blue-500 text-white" : "bg-gray-200",
                  "px-2 font-medium rounded"
                ].join(" "),
                onClick: param => setBrushMode(param => "Erase")
              })
            ],
            className: "flex flex-row gap-2"
          }),
          JsxRuntime.jsx(ReactColorful.HexColorPicker, {
            color: myColor,
            onChange: newColor => setMyColor(param => newColor)
          }),
          JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                children: "Show Brush Overlay",
                className: "flex flex-row"
              }),
              JsxRuntime.jsx(make, {
                checked: showCursorOverlay,
                onChange: v => setShowCursorOverlay(param => v)
              })
            ]
          })
        ],
        className: "flex flex-col gap-2"
      })
    ],
    className: " flex flex-col gap-5 p-5"
  });
}

let make$1 = App;

export {
  make$1 as make,
}
/* make Not a pure module */
