// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import SwitchJsx from "./Switch.jsx";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as ReactColorful from "react-colorful";
import * as JsxRuntime from "react/jsx-runtime";
import UseLocalStorageJs from "./useLocalStorage.js";

let make = SwitchJsx;

let defaultBoard = [
  [
    undefined,
    undefined,
    undefined,
    undefined
  ],
  [
    undefined,
    undefined,
    undefined,
    undefined
  ],
  [
    undefined,
    undefined,
    undefined,
    undefined
  ],
  [
    undefined,
    undefined,
    undefined,
    undefined
  ]
];

function App(props) {
  let match = UseLocalStorageJs("board", defaultBoard);
  let setBoard = match[1];
  let board = match[0];
  let width = board.length;
  let height = Stdlib_Option.mapOr(board[0], 0, line => line.length);
  let match$1 = React.useState(() => false);
  let setMaskOff = match$1[1];
  let maskOff = match$1[0];
  let match$2 = UseLocalStorageJs("show-mask", true);
  let setShowMask = match$2[1];
  let showMask = match$2[0];
  let match$3 = React.useState(() => "blue");
  let setMyColor = match$3[1];
  let myColor = match$3[0];
  let onMouseMove = param => setMaskOff(param => false);
  React.useEffect(() => {
    window.addEventListener("mousemove", onMouseMove);
  }, []);
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsx("div", {
        children: board.map((line, i) => line.map((cell, j) => {
          let backgroundColor = Stdlib_Option.getOr(cell, "transparent");
          return JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                className: "w-full h-full absolute",
                style: {
                  backgroundColor: backgroundColor
                }
              }),
              maskOff || !showMask ? null : JsxRuntime.jsx("div", {
                  className: "absolute w-full h-full inset-0 bg-gray-400 opacity-0 group-hover:opacity-50 transition duration-50"
                })
            ],
            className: "w-full h-full group relative",
            onClick: param => {
              setBoard(b => {
                let f = param => myColor;
                return b.map((row, rowI) => {
                  if (rowI === i) {
                    return row.map((cell, cellJ) => {
                      if (cellJ === j) {
                        return f(cell);
                      } else {
                        return cell;
                      }
                    });
                  } else {
                    return row;
                  }
                });
              });
              setMaskOff(param => true);
            }
          }, i.toString() + j.toString());
        })),
        className: "border w-fit h-fit",
        style: {
          display: "grid",
          gridTemplateColumns: "repeat(" + width.toString() + ", 3rem)",
          gridTemplateRows: "repeat(" + height.toString() + ", 3rem)"
        }
      }),
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsx(ReactColorful.HexColorPicker, {
            color: myColor,
            onChange: newColor => setMyColor(param => newColor)
          }),
          JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                children: "Show Overlay",
                className: "flex flex-row"
              }),
              JsxRuntime.jsx(make, {
                checked: showMask,
                onChange: v => setShowMask(param => v)
              })
            ]
          })
        ],
        className: "flex flex-col gap-5"
      })
    ],
    className: " flex flex-row gap-5"
  });
}

let make$1 = App;

export {
  make$1 as make,
}
/* make Not a pure module */
