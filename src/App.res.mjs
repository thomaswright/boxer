// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import SwitchJsx from "./Switch.jsx";
import * as Stdlib_Array from "rescript/lib/es6/Stdlib_Array.js";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as ReactColorful from "react-colorful";
import * as JsxRuntime from "react/jsx-runtime";
import UseLocalStorageJs from "./useLocalStorage.js";

let make = SwitchJsx;

function update2D(a, i, j, f) {
  return a.map((row, rowI) => {
    if (rowI === i) {
      return row.map((cell, cellJ) => {
        if (cellJ === j) {
          return f(cell);
        } else {
          return cell;
        }
      });
    } else {
      return row;
    }
  });
}

function make2D(a, b, f) {
  return Stdlib_Array.make(a, Stdlib_Array.make(b, f()));
}

function dims2D(a) {
  let boardWidth = a.length;
  let boardHeight = Stdlib_Option.mapOr(a[0], 0, line => line.length);
  return [
    boardWidth,
    boardHeight
  ];
}

let defaultBoard = make2D(12, 12, () => {});

let defaultBrush = make2D(3, 3, () => false);

function useIsMouseDown() {
  let match = React.useState(() => false);
  let setIsMouseDown = match[1];
  React.useEffect(() => {
    let downHandler = param => setIsMouseDown(param => true);
    let upHandler = param => setIsMouseDown(param => false);
    window.addEventListener("mousedown", downHandler);
    window.addEventListener("mouseup", upHandler);
    return () => {
      window.removeEventListener("mousedown", downHandler);
      window.removeEventListener("mouseup", upHandler);
    };
  }, []);
  return match[0];
}

function App(props) {
  let match = UseLocalStorageJs("board", defaultBoard);
  let setBoard = match[1];
  let board = match[0];
  let match$1 = UseLocalStorageJs("brush", defaultBrush);
  let setBrush = match$1[1];
  let brush = match$1[0];
  let match$2 = UseLocalStorageJs("show-mask", true);
  let setShowMask = match$2[1];
  let showMask = match$2[0];
  let match$3 = UseLocalStorageJs("myColor", "blue");
  let setMyColor = match$3[1];
  let myColor = match$3[0];
  let match$4 = React.useState(() => false);
  let setMaskOff = match$4[1];
  let maskOff = match$4[0];
  let isMouseDown = useIsMouseDown();
  let match$5 = dims2D(board);
  let match$6 = dims2D(brush);
  let brushHeight = match$6[1];
  let brushWidth = match$6[0];
  let onMouseMove = param => setMaskOff(param => false);
  React.useEffect(() => {
    window.addEventListener("mousemove", onMouseMove);
  }, []);
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsx("div", {
        children: brush.map((line, i) => line.map((cell, j) => {
          let isCursorCenter = (brushWidth / 2 | 0) === i && (brushHeight / 2 | 0) === j;
          return JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                className: "w-full h-full absolute",
                style: {
                  backgroundColor: cell ? "#00c3ff" : "transparent"
                }
              }),
              maskOff || !showMask ? null : JsxRuntime.jsx("div", {
                  className: "absolute w-full h-full inset-0 bg-black opacity-0 group-hover:opacity-20"
                }),
              isCursorCenter ? JsxRuntime.jsx("div", {
                  children: JsxRuntime.jsx("div", {
                    className: " w-1/2 h-1/2 bg-red-500 rounded-full"
                  }),
                  className: "absolute w-full h-full flex flex-row items-center justify-center "
                }) : null
            ],
            className: "w-full h-full group relative ",
            onClick: param => {
              setBrush(b => update2D(b, i, j, v => !v));
              setMaskOff(param => true);
            },
            onMouseEnter: param => {
              if (isMouseDown) {
                return setBrush(b => update2D(b, i, j, v => !v));
              }
              
            }
          }, i.toString() + j.toString());
        })),
        className: "border w-fit h-fit",
        style: {
          display: "grid",
          gridTemplateColumns: "repeat(" + brushWidth.toString() + ", 1rem)",
          gridTemplateRows: "repeat(" + brushHeight.toString() + ", 1rem)"
        }
      }),
      JsxRuntime.jsx("div", {
        children: board.map((line, i) => line.map((cell, j) => {
          let backgroundColor = Stdlib_Option.getOr(cell, "transparent");
          return JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                className: "w-full h-full absolute",
                style: {
                  backgroundColor: backgroundColor
                }
              }),
              maskOff || !showMask ? null : JsxRuntime.jsx("div", {
                  className: "absolute w-full h-full inset-0 bg-black opacity-0 group-hover:opacity-20"
                })
            ],
            className: "w-full h-full group relative",
            onClick: param => {
              setBoard(b => update2D(b, i, j, param => myColor));
              setMaskOff(param => true);
            },
            onMouseEnter: param => {
              if (isMouseDown) {
                return setBoard(b => update2D(b, i, j, param => myColor));
              }
              
            }
          }, i.toString() + j.toString());
        })),
        className: "border w-fit h-fit",
        style: {
          display: "grid",
          gridTemplateColumns: "repeat(" + match$5[0].toString() + ", 1rem)",
          gridTemplateRows: "repeat(" + match$5[1].toString() + ", 1rem)"
        }
      }),
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsx(ReactColorful.HexColorPicker, {
            color: myColor,
            onChange: newColor => setMyColor(param => newColor)
          }),
          JsxRuntime.jsxs("div", {
            children: [
              JsxRuntime.jsx("div", {
                children: "Show Overlay",
                className: "flex flex-row"
              }),
              JsxRuntime.jsx(make, {
                checked: showMask,
                onChange: v => setShowMask(param => v)
              })
            ]
          })
        ],
        className: "flex flex-col gap-5"
      })
    ],
    className: " flex flex-row gap-5"
  });
}

let make$1 = App;

export {
  make$1 as make,
}
/* make Not a pure module */
