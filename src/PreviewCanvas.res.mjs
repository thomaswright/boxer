// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Board from "./Board.res.mjs";
import * as Array2D from "./Array2D.res.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

function prepareContext(canvasElement, width, height) {
  canvasElement.width = width;
  canvasElement.height = height;
  let ctx = canvasElement.getContext("2d");
  ctx.imageSmoothingEnabled = false;
  ctx.clearRect(0, 0, width, height);
  return ctx;
}

function drawBoolGrid(canvasElement, grid, trueColor, falseColor) {
  let match = Array2D.dims(grid);
  let width = match[1];
  let height = match[0];
  if (height === 0 || width === 0) {
    return;
  }
  let ctx = prepareContext(canvasElement, width, height);
  let lastColor = {
    contents: ""
  };
  grid.forEach((row, rowIndex) => {
    row.forEach((cell, colIndex) => {
      let color = cell ? trueColor : falseColor;
      if (color !== undefined) {
        if (color !== lastColor.contents) {
          ctx.fillStyle = color;
          lastColor.contents = color;
        }
        ctx.fillRect(colIndex, rowIndex, 1, 1);
        return;
      }
      
    });
  });
}

function drawBoard(canvasElement, board, emptyColor) {
  let match = Board.dims(board);
  let width = match[1];
  let height = match[0];
  if (height === 0 || width === 0) {
    return;
  }
  let ctx = prepareContext(canvasElement, width, height);
  let lastColor = {
    contents: ""
  };
  Board.forEachValue(board, (rowIndex, colIndex, value) => {
    let color = value === 0 ? emptyColor : Primitive_option.fromNullable(Board.valueToNullable(value));
    if (color !== undefined) {
      if (color !== lastColor.contents) {
        ctx.fillStyle = color;
        lastColor.contents = color;
      }
      ctx.fillRect(colIndex, rowIndex, 1, 1);
      return;
    }
    
  });
}

export {
  prepareContext,
  drawBoolGrid,
  drawBoard,
}
/* Board Not a pure module */
