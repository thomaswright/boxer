// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Board from "./Board.res.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/Js_dict.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as Primitive_string from "rescript/lib/es6/Primitive_string.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as IdleSchedulerJs from "./IdleScheduler.js";

function schedule(prim) {
  return IdleSchedulerJs.schedule(prim);
}

function cancel(prim) {
  IdleSchedulerJs.cancel(prim);
}

let IdleScheduler = {
  schedule: schedule,
  cancel: cancel
};

function computeUsage(board) {
  let counts = {};
  let totalColored = {
    contents: 0
  };
  Board.forEachValue(board, (param, param$1, value) => {
    if (value === 0) {
      return;
    }
    let color = Board.valueToNullable(value);
    if (color == null) {
      return;
    }
    totalColored.contents = totalColored.contents + 1 | 0;
    let count = Js_dict.get(counts, color);
    let nextCount = count !== undefined ? count + 1 | 0 : 1;
    counts[color] = nextCount;
  });
  return {
    counts: counts,
    total: totalColored.contents
  };
}

function ColorsUsed(props) {
  let myColor = props.myColor;
  let onReplaceUsedColor = props.onReplaceUsedColor;
  let onSelectUsedColor = props.onSelectUsedColor;
  let board = props.board;
  let match = React.useState(() => false);
  let setReplaceMode = match[1];
  let replaceMode = match[0];
  let match$1 = React.useState(() => ({
    counts: {},
    total: 0
  }));
  let setUsageState = match$1[1];
  let usageState = match$1[0];
  let idleHandleRef = React.useRef(undefined);
  React.useEffect(() => {
    let handle = idleHandleRef.current;
    if (handle !== undefined) {
      IdleSchedulerJs.cancel(Primitive_option.valFromOption(handle));
      idleHandleRef.current = undefined;
    }
    let handle$1 = IdleSchedulerJs.schedule(() => {
      idleHandleRef.current = undefined;
      setUsageState(param => computeUsage(board));
    });
    idleHandleRef.current = Primitive_option.some(handle$1);
    return () => {
      let handle = idleHandleRef.current;
      if (handle !== undefined) {
        IdleSchedulerJs.cancel(Primitive_option.valFromOption(handle));
        idleHandleRef.current = undefined;
        return;
      }
      
    };
  }, [Board.data(board)]);
  let colorCounts = usageState.counts;
  let totalColoredCells = usageState.total;
  let usages = Js_dict.entries(colorCounts).map(param => {
    let count = param[1];
    let percent = totalColoredCells === 0 ? 0 : count / totalColoredCells * 100;
    return {
      color: param[0],
      count: count,
      percent: percent
    };
  }).toSorted((a, b) => {
    let other = Primitive_int.compare(b.count, a.count);
    if (other !== 0) {
      return other;
    } else {
      return Primitive_string.compare(a.color, b.color);
    }
  });
  let uniqueColorCount = usages.length;
  let match$2 = usages.length;
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsx("span", {
            children: "Colors Used",
            className: "font-medium flex-1"
          }),
          JsxRuntime.jsx("span", {
            children: uniqueColorCount.toString(),
            className: "text-xs text-gray-500 px-2"
          }),
          JsxRuntime.jsx("button", {
            children: "Set",
            className: [
              replaceMode ? " bg-blue-500 text-white" : "bg-gray-200",
              "px-1 py-0.5 font-medium text-xs rounded"
            ].join(" "),
            type: "button",
            onClick: param => setReplaceMode(v => !v)
          })
        ],
        className: "flex flex-row items-center justify-between"
      }),
      match$2 !== 0 ? JsxRuntime.jsx("div", {
          children: usages.map(param => {
            let color = param.color;
            let percentLabel = param.percent.toFixed(0);
            let isSelected = myColor === color;
            return JsxRuntime.jsxs("button", {
              children: [
                JsxRuntime.jsx("div", {
                  className: "w-4 h-4 rounded border border-gray-300",
                  style: {
                    backgroundColor: color
                  }
                }),
                JsxRuntime.jsx("div", {
                  children: (
                    percentLabel === "0" ? "<1" : percentLabel
                  ) + "%",
                  className: "text-xs text-gray-500 tabular-nums"
                }),
                JsxRuntime.jsx("div", {
                  children: param.count.toString(),
                  className: "text-xs text-gray-400 w-8 text-right tabular-nums"
                })
              ],
              className: [
                "flex flex-1 flex-row items-center gap-2 text-xs rounded px-1 py-0.5 hover:bg-gray-100 text-left",
                isSelected ? "bg-gray-200" : ""
              ].join(" "),
              title: color,
              type: "button",
              onClick: param => {
                if (replaceMode) {
                  return onReplaceUsedColor(color);
                } else {
                  return onSelectUsedColor(color);
                }
              }
            }, color);
          }),
          className: "flex flex-col max-h-48 overflow-scroll"
        }) : JsxRuntime.jsx("div", {
          children: "Start drawing to see colors",
          className: "text-xs text-gray-500"
        })
    ],
    className: "p-2 flex flex-col gap-2 w-full"
  });
}

let make = ColorsUsed;

export {
  IdleScheduler,
  computeUsage,
  make,
}
/* Board Not a pure module */
